<?php

namespace Proxies\__CG__\Cabinet\MedicalBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class patient extends \Cabinet\MedicalBundle\Entity\patient implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setCodecnam($codecnam)
    {
        $this->__load();
        return parent::setCodecnam($codecnam);
    }

    public function getCodecnam()
    {
        $this->__load();
        return parent::getCodecnam();
    }

    public function setHandicape($handicape)
    {
        $this->__load();
        return parent::setHandicape($handicape);
    }

    public function getHandicape()
    {
        $this->__load();
        return parent::getHandicape();
    }

    public function setAntecedent($antecedent)
    {
        $this->__load();
        return parent::setAntecedent($antecedent);
    }

    public function getAntecedent()
    {
        $this->__load();
        return parent::getAntecedent();
    }

    public function setChirgui($chirgui)
    {
        $this->__load();
        return parent::setChirgui($chirgui);
    }

    public function getChirgui()
    {
        $this->__load();
        return parent::getChirgui();
    }

    public function setAllergie($allergie)
    {
        $this->__load();
        return parent::setAllergie($allergie);
    }

    public function getAllergie()
    {
        $this->__load();
        return parent::getAllergie();
    }

    public function setTraitementencour($traitementencour)
    {
        $this->__load();
        return parent::setTraitementencour($traitementencour);
    }

    public function getTraitementencour()
    {
        $this->__load();
        return parent::getTraitementencour();
    }

    public function addConsul(\Cabinet\MedicalBundle\Entity\consultation $consul)
    {
        $this->__load();
        return parent::addConsul($consul);
    }

    public function removeConsul(\Cabinet\MedicalBundle\Entity\consultation $consul)
    {
        $this->__load();
        return parent::removeConsul($consul);
    }

    public function getConsul()
    {
        $this->__load();
        return parent::getConsul();
    }

    public function addSec(\Cabinet\MedicalBundle\Entity\securite $sec)
    {
        $this->__load();
        return parent::addSec($sec);
    }

    public function removeSec(\Cabinet\MedicalBundle\Entity\securite $sec)
    {
        $this->__load();
        return parent::removeSec($sec);
    }

    public function getSec()
    {
        $this->__load();
        return parent::getSec();
    }

    public function addRdve(\Cabinet\MedicalBundle\Entity\rdv $rdve)
    {
        $this->__load();
        return parent::addRdve($rdve);
    }

    public function removeRdve(\Cabinet\MedicalBundle\Entity\rdv $rdve)
    {
        $this->__load();
        return parent::removeRdve($rdve);
    }

    public function getRdve()
    {
        $this->__load();
        return parent::getRdve();
    }

    public function addOpmed(\Cabinet\MedicalBundle\Entity\operationmed $opmed)
    {
        $this->__load();
        return parent::addOpmed($opmed);
    }

    public function removeOpmed(\Cabinet\MedicalBundle\Entity\operationmed $opmed)
    {
        $this->__load();
        return parent::removeOpmed($opmed);
    }

    public function getOpmed()
    {
        $this->__load();
        return parent::getOpmed();
    }

    public function addRigime(\Cabinet\MedicalBundle\Entity\rigime $rigime)
    {
        $this->__load();
        return parent::addRigime($rigime);
    }

    public function removeRigime(\Cabinet\MedicalBundle\Entity\rigime $rigime)
    {
        $this->__load();
        return parent::removeRigime($rigime);
    }

    public function getRigime()
    {
        $this->__load();
        return parent::getRigime();
    }

    public function addCharge(\Cabinet\MedicalBundle\Entity\prisecharge $charge)
    {
        $this->__load();
        return parent::addCharge($charge);
    }

    public function removeCharge(\Cabinet\MedicalBundle\Entity\prisecharge $charge)
    {
        $this->__load();
        return parent::removeCharge($charge);
    }

    public function getCharge()
    {
        $this->__load();
        return parent::getCharge();
    }

    public function setUs(\Cabinet\MedicalBundle\Entity\User $us = NULL)
    {
        $this->__load();
        return parent::setUs($us);
    }

    public function getUs()
    {
        $this->__load();
        return parent::getUs();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'codecnam', 'handicape', 'antecedent', 'chirgui', 'allergie', 'traitementencour', 'us', 'consul', 'sec', 'rdve', 'opmed', 'rigime', 'charge');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}